import os
import logging
import sys
import requests
from flask import Flask, render_template, request, redirect, url_for
from flask_caching import Cache

# --- Configuração do Logging ---
# Para que possamos ver informações detalhadas nos logs do Fly.io
logging.basicConfig(stream=sys.stdout, level=logging.INFO)

# --- Configuração da Aplicação e do Cache ---
app = Flask(__name__)
# Configura um cache simples na memória com duração de 300 segundos (5 minutos)
cache = Cache(app, config={'CACHE_TYPE': 'SimpleCache', 'CACHE_DEFAULT_TIMEOUT': 300})

# --- Carregamento de Configurações ---
# Carrega a URL e a Chave da API a partir das variáveis de ambiente para maior segurança
MCH_API_URL = os.getenv("MCH_API_URL", "https://app.mchgestao.com.br/api/v1/tracking")
MCH_API_KEY = os.getenv("MCH_API_KEY_PROD")

@app.route('/')
def index():
    """Renderiza a página inicial com o formulário."""
    return render_template('index.html')

@app.route('/rastrear', methods=)
def rastrear():
    """Recebe o número do pedido, valida e redireciona."""
    numero_pedido = request.form.get('pedido', '').strip()

    # Validação de entrada para segurança e robustez
    if numero_pedido and numero_pedido.isdigit() and len(numero_pedido) < 20:
        return redirect(url_for('pagina_rastreio', numero_pedido=numero_pedido))
    
    # Se a validação falhar, simplesmente volta para a página inicial
    return redirect(url_for('index'))

@app.route('/rastreio/<numero_pedido>')
@cache.cached() # Aplica o cache a esta rota
def pagina_rastreio(numero_pedido):
    """Busca os dados de rastreio na API da MCH e exibe a página."""
    logging.info(f"Buscando dados para o pedido: {numero_pedido}")

    if not MCH_API_KEY:
        logging.error("ERRO CRÍTICO: A chave da API (MCH_API_KEY_PROD) não foi encontrada.")
        return render_template('erro.html', mensagem="Erro de configuração no servidor.")

    headers = {'Authorization': f'Bearer {MCH_API_KEY}'}
    payload = {'order_number': numero_pedido}

    try:
        response = requests.post(MCH_API_URL, headers=headers, json=payload, timeout=15)
        response.raise_for_status()
        
        dados_rastreio = response.json()
        logging.info(f"Sucesso ao buscar dados para o pedido {numero_pedido}.")
        return render_template('rastreio.html', eventos=dados_rastreio, pedido=numero_pedido)

    except requests.exceptions.HTTPError as e:
        logging.error(f"Erro HTTP da API para o pedido {numero_pedido}: {e}")
        if e.response.status_code == 404:
            return render_template('erro.html', mensagem=f"O pedido '{numero_pedido}' não foi encontrado. Por favor, verifique o número e tente novamente.")
        return render_template('erro.html', mensagem="O serviço de rastreio está temporariamente indisponível. Tente novamente mais tarde.")
        
    except requests.exceptions.RequestException as e:
        logging.error(f"Erro de conexão para o pedido {numero_pedido}: {e}")
        return render_template('erro.html', mensagem="Não foi possível conectar ao serviço de rastreio. Verifique sua conexão ou tente novamente mais tarde.")

